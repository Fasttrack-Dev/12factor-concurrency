#!/usr/bin/env bash

bucket_name="twelve-factor-app-service-staging"
package_name="twelve-factor-worker-app-$(uuidgen).zip"
stack_name="twelve-factor-worker-app-stack"
aws_region=$(aws configure get region)

# args (bucket-name, region)
function prepareBucket {
  echo "Creating staging bucket if necessary"
  if [ -z "$(aws s3api head-bucket --bucket "$1" 2>&1)" ]
  then
    echo "bucket exists, verifying region..."
    bucket_region=$(aws s3api get-bucket-location --bucket "$1" | jq .LocationConstraint | tr -d '"')
    if [ "$bucket_region" != "$2" ]
    then
      echo "Error: The staging bucket '$1' already exists in region $bucket_region"
      exit 1
    fi
  else
    echo "Info: The staging bucket does not yet exist and will be created in your configured region $aws_region"
    aws s3api create-bucket --bucket "$1" --region "$2" --create-bucket-configuration LocationConstraint="$2"
  fi
}

# main
echo "The stack will deployed in region $aws_region"

# build the application binary
echo "Building binary"
./gradlew build

# package it
echo "Packaging binary and extensions"
rm -rf "$package_name"
zip -j "$package_name" build/libs/*.jar

# stage it
prepareBucket "$bucket_name" "$aws_region"

echo "Staging to $bucket_name"
aws s3 cp "$package_name" "s3://$bucket_name"

# spin up / refresh environment
aws cloudformation deploy \
  --stack-name "$stack_name" \
  --template-file cloudformation/worker-app.yml \
  --capabilities CAPABILITY_IAM \
  --parameter-overrides \
      PackageName="$package_name" \
      BucketName="$bucket_name"

sqs_url=$(aws cloudformation describe-stacks \
  --stack-name "$stack_name" \
  --query "Stacks[0].Outputs[? OutputKey=='WorkerQueueUrl'].OutputValue" \
  --output text)

echo "Remove staging"
aws s3 rm s3://"$bucket_name"/"$package_name"
rm "$package_name"

echo "Done."
echo "To test, send messages to the worker queue:"
echo "aws sqs send-message --queue-url $sqs_url --message-body 'Some message body'"
echo
echo "To verify, request and retrieve the environment logs:"
echo "aws elasticbeanstalk request-environment-info --environment-name twelve-factor-worker-environment --info-type tail"
echo "aws elasticbeanstalk retrieve-environment-info --environment-name twelve-factor-worker-environment --info-type tail"
